import numpy as np
import pandas as pd
import tensorflow as tf
import random
import matplotlib.pyplot as plt
import matplotlib.image as mping
from keras.preprocessing.image import ImageDataGenerator
%matplotlib inline

TrainingDataImages = 'E:/BE1/DL/Image/train'
TestingDataImages = 'E:/BE1/DL/Image/test'
ValidationDataImages = 'E:/BE1/DL/Image/valid'

train_datagen = ImageDataGenerator(
rescale = 1./255,
shear_range=0.1,
zoom_range=0.1,
horizontal_flip=True

)
test_datagen = ImageDataGenerator(rescale = 1./255)

training_dataset = train_datagen.flow_from_directory(
    TrainingDataImages,
    target_size = (128,128),
    batch_size = 32,
    class_mode = "categorical"
)

testing_dataset = test_datagen.flow_from_directory(
    TestingDataImages,
    target_size=(128,128),
    batch_size = 32,
    class_mode = "categorical"
)

valid_dataset = test_datagen.flow_from_directory(
    ValidationDataImages,
    target_size=(128,128),
    batch_size = 32,
    class_mode = "categorical"
)
plt.figure(figsize = (20, 20))
random_index = random.choice(list(range(1, 49)))

for labels, number in training_dataset.class_indices.items():
    plt.subplot(6, 6, number+1)
    try :
        image_path = TrainingDataImages + '/' + labels + '/' + str(random_index).zfill(3) + '.jpg'
        plt.imshow(mping.imread(image_path))
    except:
        image_path = TrainingDataImages + '/' + labels + '/' + str(random_index).zfill(2) + '.jpg'
        plt.imshow(mping.imread(image_path))
    plt.title(labels)
    plt.axis(False)

testing_dataset.class_indices

from keras.models import *

from keras.layers import *

model = Sequential()

model.add(Convolution2D(32, kernel_size=(3,3), strides=(1,1), input_shape=(128, 128,3), activation='relu'))

model.add(MaxPool2D(pool_size=(2, 2)))

model.add(Convolution2D(32, kernel_size=(3,3), strides=(1,1), activation='relu'))

model.add(MaxPool2D(pool_size=(2, 2)))

model.add(Flatten())

model.add(Dense(128, activation='relu'))

model.add(Dense(13, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])

model.summary()

import time
StartTime = time.time()
history = model.fit_generator(
    training_dataset,
    steps_per_epoch=len(training_dataset),
    epochs=10,
    validation_data=(valid_dataset),
    validation_steps=len(valid_dataset)
)
EndTime = time.time()
print("Time require", )

accuracy = history.history['accuracy']
val_accuracy = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

plt.figure(figsize=(10,5))
plt.plot(accuracy, label='Accuracy')
plt.plot(val_accuracy, label='Validation Accuracy')
plt.legend()
plt.show()
